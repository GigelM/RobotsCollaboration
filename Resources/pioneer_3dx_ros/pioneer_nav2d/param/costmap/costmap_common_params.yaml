# Common costmap params:

# Coordinate frame and tf parameters
global_frame: "/map"             # The global frame for the costmap to operate in.
robot_base_frame: "base_link"    # The name of the frame for the base link of the robot.

# These parameters are used by the ObstacleCostmapPlugin.
#robot_radius: 0.60               # distance a circular robot should be clear of the obstacle
footprint: [[-0.23,-0.23],[-0.23,0.23], [0.23, 0.23], [0.23,-0.23]]
track_unknown_space: false       # If false, each pixel has one of 2 states lethal obstacle or free. If true, each pixel has one of 3 states lethal obstacle, free, or unknown.
footprint_clearing_enabled: true # If true, the robot footprint will clear (mark as free) the space in which it travels.
combination_method: 1            # Changes the behaviour how the obstacle_layer handles incoming data from layers beyond it. Possible values are "Overwrite" (0), "Maximum" (1) and "Nothing" (99). "Overwrite" simply overwrites the data below, i.e. they are not used. "Maximum" is what you want most of the times. It takes the maximum of what is supplied in the obstacle_layer or the incoming data. "Nothing" doesn't change the incoming data at all. Note that this highly influences how the costmap behaves, depending on your setting of track_unkown_space. 

#The following parameters are used by the VoxelCostmapPlugin.
origin_z: 0.0                    # The z origin of the map in meters.
z_resolution: 0.2                # The z resolution of the map in meters/cell.
z_voxels: 2                      # ( default 10) The number of voxels to in each vertical column, the height of the grid is z_resolution * z_voxels.
unknown_threshold: 2             # (int, default ~<name>/z_voxels) The number of unknown cells allowed in a column considered to be "known"
mark_threshold: 0                # The maximum number of marked cells allowed in a column considered to be "free".
publish_voxel_map: false         # Whether or not to publish the underlying voxel grid for visualization purposes.
inflation_radius: 0.55           # (double, default 0.55) The radius in meters to which the map inflates obstacle cost values.
cost_scaling_factor: 4         # (double, default 10.0) A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.

# Sensor management parameters:
observation_sources: scan 
scan:
    topic: scan                  # The topic on which sensor data comes in for this source. Defaults to the name of the source.
    observation_persistence: 0.0 # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
    expected_update_rate: 0.0    # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
    data_type: LaserScan         # The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
    clearing: true               # Whether or not this observation should be used to clear out freespace.
    marking: true                # Whether or not this observation should be used to mark obstacles.
    max_obstacle_height: 0.35    # ( defautl:2.0 )The maximum height in meters of a sensor reading considered valid. This is usually set to be slightly higher than the height of the robot. Setting this parameter to a value greater than the global max_obstacle_height parameter has no effect. Setting this parameter to a value less than the global max_obstacle_height will filter out points from this sensor above that height.
    min_obstacle_height: 0.25    # The minimum height in meters of a sensor reading considered valid. This is usually set to be at ground height, but can be set higher or lower based on the noise model of your sensor.
    obstacle_range: 8.0          # (default 2.5) The maximum range in meters at which to insert obstacles into the costmap using sensor data.
    raytrace_range: 8.0          # ( default 3.0) The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
    inf_is_valid: false          # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.

#Map management parameters
rolling_window: false            # Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false.
always_send_full_costmap: false  # If true the full costmap is published to "~<name>/costmap" every update. If false only the part of the costmap that has changed is published on the "~<name>/costmap_updates" topic.
