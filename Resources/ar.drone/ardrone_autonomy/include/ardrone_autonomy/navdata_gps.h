// Generated by gencpp from file ardrone_autonomy/navdata_gps.msg
// DO NOT EDIT!


#ifndef ARDRONE_AUTONOMY_MESSAGE_NAVDATA_GPS_H
#define ARDRONE_AUTONOMY_MESSAGE_NAVDATA_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ardrone_autonomy/navdata_gps_channel.h>

namespace ardrone_autonomy
{
template <class ContainerAllocator>
struct navdata_gps_
{
  typedef navdata_gps_<ContainerAllocator> Type;

  navdata_gps_()
    : header()
    , tag(0)
    , size(0)
    , latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , hdop(0.0)
    , data_available(0)
    , zero_validated(false)
    , wpt_validated(false)
    , lat0(0.0)
    , long0(0.0)
    , lat_fused(0.0)
    , long_fused(0.0)
    , gps_state(0)
    , X_traj(0.0)
    , X_ref(0.0)
    , Y_traj(0.0)
    , Y_ref(0.0)
    , theta_p(0.0)
    , phi_p(0.0)
    , theta_i(0.0)
    , phi_i(0.0)
    , theta_d(0.0)
    , phi_d(0.0)
    , vdop(0.0)
    , pdop(0.0)
    , speed(0.0)
    , lastFrameTimestamp(0)
    , degree(0.0)
    , degree_magnetic(0.0)
    , ehpe(0.0)
    , ehve(0.0)
    , c_n0(0.0)
    , nbsat(0)
    , channels()
    , is_gps_plugged(false)
    , ephemerisStatus(0)
    , vx_traj(0.0)
    , vy_traj(0.0)
    , firmwareStatus(0)  {
    }
  navdata_gps_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tag(0)
    , size(0)
    , latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , hdop(0.0)
    , data_available(0)
    , zero_validated(false)
    , wpt_validated(false)
    , lat0(0.0)
    , long0(0.0)
    , lat_fused(0.0)
    , long_fused(0.0)
    , gps_state(0)
    , X_traj(0.0)
    , X_ref(0.0)
    , Y_traj(0.0)
    , Y_ref(0.0)
    , theta_p(0.0)
    , phi_p(0.0)
    , theta_i(0.0)
    , phi_i(0.0)
    , theta_d(0.0)
    , phi_d(0.0)
    , vdop(0.0)
    , pdop(0.0)
    , speed(0.0)
    , lastFrameTimestamp(0)
    , degree(0.0)
    , degree_magnetic(0.0)
    , ehpe(0.0)
    , ehve(0.0)
    , c_n0(0.0)
    , nbsat(0)
    , channels()
    , is_gps_plugged(false)
    , ephemerisStatus(0)
    , vx_traj(0.0)
    , vy_traj(0.0)
    , firmwareStatus(0)  {
  (void)_alloc;
      channels.assign( ::ardrone_autonomy::navdata_gps_channel_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _tag_type;
  _tag_type tag;

   typedef uint16_t _size_type;
  _size_type size;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _elevation_type;
  _elevation_type elevation;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef uint32_t _data_available_type;
  _data_available_type data_available;

   typedef uint8_t _zero_validated_type;
  _zero_validated_type zero_validated;

   typedef uint8_t _wpt_validated_type;
  _wpt_validated_type wpt_validated;

   typedef double _lat0_type;
  _lat0_type lat0;

   typedef double _long0_type;
  _long0_type long0;

   typedef double _lat_fused_type;
  _lat_fused_type lat_fused;

   typedef double _long_fused_type;
  _long_fused_type long_fused;

   typedef uint32_t _gps_state_type;
  _gps_state_type gps_state;

   typedef float _X_traj_type;
  _X_traj_type X_traj;

   typedef float _X_ref_type;
  _X_ref_type X_ref;

   typedef float _Y_traj_type;
  _Y_traj_type Y_traj;

   typedef float _Y_ref_type;
  _Y_ref_type Y_ref;

   typedef float _theta_p_type;
  _theta_p_type theta_p;

   typedef float _phi_p_type;
  _phi_p_type phi_p;

   typedef float _theta_i_type;
  _theta_i_type theta_i;

   typedef float _phi_i_type;
  _phi_i_type phi_i;

   typedef float _theta_d_type;
  _theta_d_type theta_d;

   typedef float _phi_d_type;
  _phi_d_type phi_d;

   typedef double _vdop_type;
  _vdop_type vdop;

   typedef double _pdop_type;
  _pdop_type pdop;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint32_t _lastFrameTimestamp_type;
  _lastFrameTimestamp_type lastFrameTimestamp;

   typedef float _degree_type;
  _degree_type degree;

   typedef float _degree_magnetic_type;
  _degree_magnetic_type degree_magnetic;

   typedef float _ehpe_type;
  _ehpe_type ehpe;

   typedef float _ehve_type;
  _ehve_type ehve;

   typedef float _c_n0_type;
  _c_n0_type c_n0;

   typedef uint32_t _nbsat_type;
  _nbsat_type nbsat;

   typedef boost::array< ::ardrone_autonomy::navdata_gps_channel_<ContainerAllocator> , 12>  _channels_type;
  _channels_type channels;

   typedef uint8_t _is_gps_plugged_type;
  _is_gps_plugged_type is_gps_plugged;

   typedef uint32_t _ephemerisStatus_type;
  _ephemerisStatus_type ephemerisStatus;

   typedef float _vx_traj_type;
  _vx_traj_type vx_traj;

   typedef float _vy_traj_type;
  _vy_traj_type vy_traj;

   typedef uint32_t _firmwareStatus_type;
  _firmwareStatus_type firmwareStatus;





  typedef boost::shared_ptr< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> const> ConstPtr;

}; // struct navdata_gps_

typedef ::ardrone_autonomy::navdata_gps_<std::allocator<void> > navdata_gps;

typedef boost::shared_ptr< ::ardrone_autonomy::navdata_gps > navdata_gpsPtr;
typedef boost::shared_ptr< ::ardrone_autonomy::navdata_gps const> navdata_gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardrone_autonomy::navdata_gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ardrone_autonomy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ardrone_autonomy': ['/home/raluca/catkin_ws/src/AR.Drone-basic-control/src/ardrone_autonomy/msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa7c33e4429a6e2f18840415e639cf24";
  }

  static const char* value(const ::ardrone_autonomy::navdata_gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa7c33e4429a6e2fULL;
  static const uint64_t static_value2 = 0x18840415e639cf24ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardrone_autonomy/navdata_gps";
  }

  static const char* value(const ::ardrone_autonomy::navdata_gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
uint16 tag\n\
uint16 size\n\
float64 latitude\n\
float64 longitude\n\
float64 elevation\n\
float64 hdop\n\
uint32   data_available\n\
bool zero_validated \n\
bool wpt_validated \n\
float64 lat0 \n\
float64 long0 \n\
float64 lat_fused \n\
float64 long_fused \n\
uint32 gps_state \n\
float32 X_traj \n\
float32 X_ref \n\
float32 Y_traj \n\
float32 Y_ref \n\
float32 theta_p \n\
float32 phi_p \n\
float32 theta_i \n\
float32 phi_i \n\
float32 theta_d \n\
float32 phi_d \n\
float64 vdop\n\
float64 pdop\n\
float32 speed\n\
uint32  lastFrameTimestamp\n\
float32 degree\n\
float32 degree_magnetic\n\
float32 ehpe \n\
float32 ehve \n\
float32 c_n0  # Signal to noise ratio (average of the four best satellites)\n\
uint32  nbsat # Number of acquired satellites\n\
navdata_gps_channel[12] channels\n\
bool is_gps_plugged\n\
uint32 ephemerisStatus\n\
float32 vx_traj \n\
float32 vy_traj \n\
uint32 firmwareStatus\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ardrone_autonomy/navdata_gps_channel\n\
uint8 sat # Satellite ID\n\
uint8 c_n0\n\
";
  }

  static const char* value(const ::ardrone_autonomy::navdata_gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tag);
      stream.next(m.size);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.elevation);
      stream.next(m.hdop);
      stream.next(m.data_available);
      stream.next(m.zero_validated);
      stream.next(m.wpt_validated);
      stream.next(m.lat0);
      stream.next(m.long0);
      stream.next(m.lat_fused);
      stream.next(m.long_fused);
      stream.next(m.gps_state);
      stream.next(m.X_traj);
      stream.next(m.X_ref);
      stream.next(m.Y_traj);
      stream.next(m.Y_ref);
      stream.next(m.theta_p);
      stream.next(m.phi_p);
      stream.next(m.theta_i);
      stream.next(m.phi_i);
      stream.next(m.theta_d);
      stream.next(m.phi_d);
      stream.next(m.vdop);
      stream.next(m.pdop);
      stream.next(m.speed);
      stream.next(m.lastFrameTimestamp);
      stream.next(m.degree);
      stream.next(m.degree_magnetic);
      stream.next(m.ehpe);
      stream.next(m.ehve);
      stream.next(m.c_n0);
      stream.next(m.nbsat);
      stream.next(m.channels);
      stream.next(m.is_gps_plugged);
      stream.next(m.ephemerisStatus);
      stream.next(m.vx_traj);
      stream.next(m.vy_traj);
      stream.next(m.firmwareStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navdata_gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_autonomy::navdata_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardrone_autonomy::navdata_gps_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tag: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tag);
    s << indent << "size: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.size);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "elevation: ";
    Printer<double>::stream(s, indent + "  ", v.elevation);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "data_available: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.data_available);
    s << indent << "zero_validated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zero_validated);
    s << indent << "wpt_validated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wpt_validated);
    s << indent << "lat0: ";
    Printer<double>::stream(s, indent + "  ", v.lat0);
    s << indent << "long0: ";
    Printer<double>::stream(s, indent + "  ", v.long0);
    s << indent << "lat_fused: ";
    Printer<double>::stream(s, indent + "  ", v.lat_fused);
    s << indent << "long_fused: ";
    Printer<double>::stream(s, indent + "  ", v.long_fused);
    s << indent << "gps_state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_state);
    s << indent << "X_traj: ";
    Printer<float>::stream(s, indent + "  ", v.X_traj);
    s << indent << "X_ref: ";
    Printer<float>::stream(s, indent + "  ", v.X_ref);
    s << indent << "Y_traj: ";
    Printer<float>::stream(s, indent + "  ", v.Y_traj);
    s << indent << "Y_ref: ";
    Printer<float>::stream(s, indent + "  ", v.Y_ref);
    s << indent << "theta_p: ";
    Printer<float>::stream(s, indent + "  ", v.theta_p);
    s << indent << "phi_p: ";
    Printer<float>::stream(s, indent + "  ", v.phi_p);
    s << indent << "theta_i: ";
    Printer<float>::stream(s, indent + "  ", v.theta_i);
    s << indent << "phi_i: ";
    Printer<float>::stream(s, indent + "  ", v.phi_i);
    s << indent << "theta_d: ";
    Printer<float>::stream(s, indent + "  ", v.theta_d);
    s << indent << "phi_d: ";
    Printer<float>::stream(s, indent + "  ", v.phi_d);
    s << indent << "vdop: ";
    Printer<double>::stream(s, indent + "  ", v.vdop);
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "lastFrameTimestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lastFrameTimestamp);
    s << indent << "degree: ";
    Printer<float>::stream(s, indent + "  ", v.degree);
    s << indent << "degree_magnetic: ";
    Printer<float>::stream(s, indent + "  ", v.degree_magnetic);
    s << indent << "ehpe: ";
    Printer<float>::stream(s, indent + "  ", v.ehpe);
    s << indent << "ehve: ";
    Printer<float>::stream(s, indent + "  ", v.ehve);
    s << indent << "c_n0: ";
    Printer<float>::stream(s, indent + "  ", v.c_n0);
    s << indent << "nbsat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nbsat);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ardrone_autonomy::navdata_gps_channel_<ContainerAllocator> >::stream(s, indent + "    ", v.channels[i]);
    }
    s << indent << "is_gps_plugged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_gps_plugged);
    s << indent << "ephemerisStatus: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ephemerisStatus);
    s << indent << "vx_traj: ";
    Printer<float>::stream(s, indent + "  ", v.vx_traj);
    s << indent << "vy_traj: ";
    Printer<float>::stream(s, indent + "  ", v.vy_traj);
    s << indent << "firmwareStatus: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.firmwareStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDRONE_AUTONOMY_MESSAGE_NAVDATA_GPS_H
